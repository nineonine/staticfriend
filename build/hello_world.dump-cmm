
==================== Output Cmm ====================
2021-06-10 06:10:39.038323 UTC

[]


==================== Output Cmm ====================
2021-06-10 06:10:39.038737 UTC

[section ""data" . _uKr_srt" {
     _uKr_srt:
         const stg_SRT_1_info;
         const GHC.CString.unpackCString#_closure;
         const 0;
 },
 section ""cstring" . cKn_str" {
     cKn_str:
         I8[] "Hello, World!"
 },
 sat_sKg_entry() { //  [R1]
         { info_tbls: [(cKo,
                        label: sat_sKg_info
                        rep: HeapRep static { Thunk }
                        srt: Just _uKr_srt)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       cKo: // global
           _sKg::P64 = R1;
           if ((Sp + 8) - 24 < SpLim) (likely: False) goto cKp; else goto cKq;
       cKp: // global
           R1 = _sKg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKq: // global
           (_cKk::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _sKg::P64);
           if (_cKk::I64 == 0) goto cKm; else goto cKl;
       cKm: // global
           call (I64[_sKg::P64])() args: 8, res: 0, upd: 8;
       cKl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKk::I64;
           R2 = cKn_str;
           R1 = GHC.CString.unpackCString#_closure;
           Sp = Sp - 16;
           call stg_ap_n_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . sat_sKg_closure" {
     sat_sKg_closure:
         const sat_sKg_info;
         const 0;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.041589 UTC

[section ""data" . _uKJ_srt" {
     _uKJ_srt:
         const stg_SRT_2_info;
         const System.IO.putStrLn_closure;
         const sat_sKg_closure;
         const 0;
 },
 Main.main_entry() { //  [R1]
         { info_tbls: [(cKG,
                        label: Main.main_info
                        rep: HeapRep static { Thunk }
                        srt: Just _uKJ_srt)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       cKG: // global
           _r1::P64 = R1;
           if ((Sp + 8) - 24 < SpLim) (likely: False) goto cKH; else goto cKI;
       cKH: // global
           R1 = _r1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKI: // global
           (_cKD::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r1::P64);
           if (_cKD::I64 == 0) goto cKF; else goto cKE;
       cKF: // global
           call (I64[_r1::P64])() args: 8, res: 0, upd: 8;
       cKE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKD::I64;
           R2 = sat_sKg_closure;
           R1 = System.IO.putStrLn_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . Main.main_closure" {
     Main.main_closure:
         const Main.main_info;
         const 0;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.042908 UTC

[section ""data" . _uL0_srt" {
     _uL0_srt:
         const stg_SRT_2_info;
         const GHC.TopHandler.runMainIO_closure;
         const Main.main_closure;
         const 0;
 },
 :Main.main_entry() { //  [R1]
         { info_tbls: [(cKX,
                        label: :Main.main_info
                        rep: HeapRep static { Thunk }
                        srt: Just _uL0_srt)]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       cKX: // global
           _01D::P64 = R1;
           if ((Sp + 8) - 24 < SpLim) (likely: False) goto cKY; else goto cKZ;
       cKY: // global
           R1 = _01D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cKZ: // global
           (_cKU::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _01D::P64);
           if (_cKU::I64 == 0) goto cKW; else goto cKV;
       cKW: // global
           call (I64[_01D::P64])() args: 8, res: 0, upd: 8;
       cKV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cKU::I64;
           R2 = Main.main_closure;
           R1 = GHC.TopHandler.runMainIO_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""data" . :Main.main_closure" {
     :Main.main_closure:
         const :Main.main_info;
         const 0;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.044562 UTC

[section ""cstring" . $trModule1_rDZ_bytes" {
     $trModule1_rDZ_bytes:
         I8[] "main"
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.044855 UTC

[section ""data" . $trModule2_rE5_closure" {
     $trModule2_rE5_closure:
         const GHC.Types.TrNameS_con_info;
         const $trModule1_rDZ_bytes;
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.045155 UTC

[section ""cstring" . $trModule3_rE6_bytes" {
     $trModule3_rE6_bytes:
         I8[] "Main"
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.045445 UTC

[section ""data" . $trModule4_rE7_closure" {
     $trModule4_rE7_closure:
         const GHC.Types.TrNameS_con_info;
         const $trModule3_rE6_bytes;
 }]


==================== Output Cmm ====================
2021-06-10 06:10:39.045786 UTC

[section ""data" . Main.$trModule_closure" {
     Main.$trModule_closure:
         const GHC.Types.Module_con_info;
         const $trModule2_rE5_closure+1;
         const $trModule4_rE7_closure+1;
         const 3;
 }]

